{
    "Ansible.MakeOptAndUser":{
        "prefix": ["ansible.large.preinstall"],
        "body": [

            "- name: Add ${1:AppName} Services User",
            "  user: ",
            "    name: \"svc_${1:AppName}\"",
            "    create_home: no",
            "    force: yes",
            "    state: present",
            "    system: yes",
            "    shell: /bin/bash",
            "",
            "- name: Create ${1:AppName} storage directory",
            "  file:",
            "    path: /opt/${1:AppName}",
            "    state: directory",
            "    owner: \"svc_${1:AppName}\"",
            "    group: \"svc_${1:AppName}\"",
             
              "$0"


        ],
        "description": "Makes a folder in /opt/, creates a svc user for that opt, and a group for that svc user",
        "scope": "ansible"
    },

    "Ansible.StartBlock":{
        "prefix": ["ansible.large.startblock"],
        "body": [

            "#!/usr/bin/env ansible-playbook",
            "---",
            "- hosts: all",
            "  become: true",
            "  vars:",
            "     myvar: \"myvar\"",
            "  tasks: ",
            "",
            "     $0"

        ],
        "description": "Ansible Start Block",
        "scope": "ansible"
    },
	
    "Ansible.LatestGitRelease":{
        "prefix": ["ansible.large.git_latest"],
        "body": [

            "- name: Get Github Latest Release asset",
            "  block:" ,
            "    - name: Set fact for API target for ${1:Github_repo}",
            "      ansible.builtin.set_fact:",
            "        ${3:myapp_api_target}: \"https://api.github.com/repos/{{ ${2:myapp_owner_repo_var} }}/releases/latest\"",
            "",
            "    - name: Get the latest tag from Github for ${1:Github_repo}",
            "      ansible.builtin.uri:",
            "        url: \"${3:myapp_api_target}",
            "      register: latest_release",
            "",
            "    - name: Print latest release details for ${1}",
            "      ansible.builtin.debug:",
            "        msg: |",
            "          Release name: {{ latest_release.json.name }}",
            "          Release tag: {{ latest_release.json.tag_name }}",
            "",
            "    - name: Set variable for latest release tag",
            "      set_fact:",
            "        latest_release_tag: \"{{ latest_release.tag_name }}\"",
            "",
            "    - name: Set variable for latest release tag without 'v'",
            "      set_fact:",
            "        latest_release_semver: \"{{ latest_release_tag | replace('v','') }}\"",
            "  when: not github_version",
            "",
            "- name: Set release version to user defined value",
            "  ansible.builtin.set_fact:",
            "    release_version: \"{{ github_version }}\"",
            "  when: github_version",
            "",
            "- name: Set release version to lastest version",
            "  ansible.builtin.set_fact:",
            "    release_version: \"{{ latest_release_tag }}\"",
            "  when: not github_version",
            "",
            "- name: Download release",
            "  ansible.builtin.get_url:",
            "    url: \"https://github.com/{{ ${2:myapp_owner_repo_var} }}/releases/download/{{ release_version }}/${4:release_file}\"",
            "    dest: \"${5:managed_node_dest }\"",
            "$0",
            "",
        ],
        "description": "Ansible Get latest Git Release",
        "scope": "ansible"
    },

    "Ansible.MakeCommandVariable":{
        "prefix": ["ansible.large.command_variable"],
        "body": [
            "- name: Make command execution for ${1:my_command}",
            "  set_fact:",
            "    ${2:my_command}_var: >-",
            "      ${3:my_command}",
            "      ${4:raw_param}",
            "      --${5:param1} ${6:param1_val}",
            "      --${7:param2} ${8:param2_val}",
            "$0"
        ],
        "description": "Used for Ansible to make more complex commands",
        "scope": "ansible"
    },

    "Ansible.MakeStateCompleteFlag": {
    "prefix": ["ansible.large.state_complete_flag"],
    "body": [
        "- name: Check if ${1:condition_is_true}",
        "  ansible.builtin.stat:",
        "    path: \"{{ ${2:flag_name}_path }}\"",
        "  register: ${2:flag_name}",
        "",
        "$0",
        "  when: not ${2:flag_name}.stat.exists",
        "",
        "- name: Touch a file to demonstrate ${1:condition_is_true}",
        "  ansible.builtin.file:",
        "    path: \"{{ ${2:flag_name}_path }}\"",
        "    state: touch",
        "    mode: '0700'",
        "  when: not ${2:flag_name}.stat.exists"
    ],
    "description": "Used for Ansible create commands to support idempotence",
    "scope": "ansible"
    },

    "Ansible.RandomStringIfIdentified":{
        "prefix": ["ansible.large.randomize_undefined_string"],
        "body": [
            "- name: Set ${1:key_description} since it was provided",
            "  ansible.builtin.set_fact:",
            "    ${3:key_var_to_use}: \"{{ ${2:variable_to_check} }}\"",
            "  when: ${2:variable_to_check}",
            "  no_log: true",
            "",
            "- name: Create ${1:key_description} since it was not provided",
            "  ansible.builtin.set_fact:",
            "    ${3:key_var_to_use}: \"{{ lookup('community.general.random_string', length=24, special=false) }}\"",
            "  when: not ${2:variable_to_check}",
            "  no_log: true",
            "",
            "$0"
        ],
        "description": "A snippet to make a variable if the default was not given",
        "scope": "ansible"
    },



}